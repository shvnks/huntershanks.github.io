<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ctf-writeups on Shanks&#39; Blog</title>
    <link>https://shanks.dev/tags/ctf-writeups/</link>
    <description>Recent content in ctf-writeups on Shanks&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 25 May 2023 21:10:04 -0400</lastBuildDate><atom:link href="https://shanks.dev/tags/ctf-writeups/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>North Sec 2023 - Look Within Myself</title>
      <link>https://shanks.dev/posts/ctf-writeups/nsec2023/look-within-myself/readme/</link>
      <pubDate>Thu, 25 May 2023 21:10:04 -0400</pubDate>
      
      <guid>https://shanks.dev/posts/ctf-writeups/nsec2023/look-within-myself/readme/</guid>
      <description>From the discourse page we are given the following information:
Based on the information given, we have to tinker with the image posted:
Let&amp;rsquo;s first check if there are embedded files within the image using the following command:
$ binwalk myself-avatar.jpg Okay so there&amp;rsquo;s a zip file hidden, let&amp;rsquo;s extract it using the following command:
$ binwalk --dd=&amp;#39;.*&amp;#39; myself-avatar.jpg We now have the following zip file, it is password protected. From here we could attempt to brute force it with a tool but I was lucky and guessed the correct password to be password.</description>
    </item>
    
    <item>
      <title>MagpieCTF 2023 - This outta be large enough right?</title>
      <link>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/binary/this-outta-be-large-enough-right/readme/</link>
      <pubDate>Tue, 28 Feb 2023 14:26:57 -0500</pubDate>
      
      <guid>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/binary/this-outta-be-large-enough-right/readme/</guid>
      <description>We’re given a C source code file to analyze and its executable to test with.
Solution I would like to preface this, that I have done this exact challenge from PicoCTF 2022, called buffer overflow 1 and at the time I followed along with John Hammond’s solution video. As a result, when I saw this challenge, I immediately recognized it and thus I used the solution developed by John Hammond, and simply modified it for this challenges specifics.</description>
    </item>
    
    <item>
      <title>MagpieCTF 2023 - No Password Here</title>
      <link>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/binary/no-password-here/readme/</link>
      <pubDate>Tue, 28 Feb 2023 13:01:33 -0500</pubDate>
      
      <guid>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/binary/no-password-here/readme/</guid>
      <description>This challenge had us look at a C source code file and try to find a way to cause a buffer overflow. Here is the compiled program and its lib.
Solution Opening the C file, we see that the file does not have the typical gets function that is well known for its vulnerabilities. Instead the function we have to focus on it scanf. If you aren’t aware, scanf does not have bound checking capability so if the input string is longer than the buffer size, then it will overflow.</description>
    </item>
    
    <item>
      <title>MagpieCTF 2023 - What is Password</title>
      <link>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/networks/what-is-password/readme/</link>
      <pubDate>Tue, 28 Feb 2023 12:45:57 -0500</pubDate>
      
      <guid>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/networks/what-is-password/readme/</guid>
      <description>This challenge had us look at a pcap file and look through the web traffic. The file can be found here.
Solution First we open the file in Wireshark.
Since the amount of web traffic is very small we can just analyze it manually. Notice the HTTP GET request for /Password.PNG in frame 4. After nearly 10 ACKs and PSHs, we get our server response code 200, HTTP OK in frame 15.</description>
    </item>
    
    <item>
      <title>MagpieCTF 2023 - Chocolate Chips With Zero G</title>
      <link>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/web/chocolate-chips-with-zero-g/</link>
      <pubDate>Mon, 27 Feb 2023 23:36:33 -0500</pubDate>
      
      <guid>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/web/chocolate-chips-with-zero-g/</guid>
      <description>This challenge had us visit our targets website, and look for an insecure admin portal.
Solution Default websites often have a login/admin.html/php web page for admin users to login and modify certain elements. Using this information we can quickly test it, it never hurts to try right? As such we find that http://srv1.2023.magpiectf.ca:1234/admin.html exists.
Note, you could have alternatively seen within the robots.txt that it disallows the traversal/crawling of /admin.html or you could have seen the invisible link within the nav bar.</description>
    </item>
    
    <item>
      <title>MagpieCTF 2023 - So Meta</title>
      <link>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/forensics/readme/</link>
      <pubDate>Mon, 27 Feb 2023 23:35:57 -0500</pubDate>
      
      <guid>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/forensics/readme/</guid>
      <description>This challenge had us look at 2 Portable Network Graphic (PNG) files that were mangled and half-destroyed. See below:
Solution In our terminal of choice, using the following command:
strings challenge.png We can see in the output that the challengers offered a hint: Have you heard of stegsolve? My answer: nope.
A quick search for stegsolve leads me to this GitHub repo containing a stegsolve tool.
We install the stegsolver tool on my virtual machine and ran the imagine combiner tool under the analyse tab to retrieve the flag:</description>
    </item>
    
    <item>
      <title>MagpieCTF 2023</title>
      <link>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/readme/</link>
      <pubDate>Sun, 26 Feb 2023 23:35:33 -0500</pubDate>
      
      <guid>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/readme/</guid>
      <description>Time for my second CTF! Over the weekend (Feb 24-26 2023) I participated in my second CTF competition, MagpieCTF. It is hosted by the University of Calgary Information Security Club, geared towards beginner to intermediate level players. Since my first CTF left me a little disapointed as my team didn’t cooperate as one, I chose to tackle this one alone. Oh boy did that make it much more difficult.
As the rules prohibited players from asking third parties for solutions or methods of attack, I was left only with the power of browsing the web in research so I can learn of different methods to solve the challenges.</description>
    </item>
    
    <item>
      <title>Cyber Advent 2022 - Day 1 [Frameworks] [Someone&#39;s coming to town!]</title>
      <link>https://shanks.dev/posts/ctf-writeups/cyber-advent-2022/day-01/readme/</link>
      <pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shanks.dev/posts/ctf-writeups/cyber-advent-2022/day-01/readme/</guid>
      <description>Day 1 of tryhackme&amp;rsquo;s Advent of Cyber for 2022! This challenge involves solving 3 puzzles that provide general outlines for various security frameworks. Each puzzle comes with a set of clues that will guide you to place the puzzle pieces in the correct order.
Puzzle #1 Clues:
Research is part of my ask, finding clues in public sources. Simple documents I turn into malware. A pizza, parcel or payload all have me as an action in common.</description>
    </item>
    
    <item>
      <title>Cyber Advent 2022 - Day 2 [Log Analysis] [Santa&#39;s Naughty &amp; Nice Log]</title>
      <link>https://shanks.dev/posts/ctf-writeups/cyber-advent-2022/day-02/readme/</link>
      <pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shanks.dev/posts/ctf-writeups/cyber-advent-2022/day-02/readme/</guid>
      <description>Day 2 of tryhackme&amp;rsquo;s Advent of Cyber for 2022! This challenge involves learning about grep and its basic capabilities. This task requires you to use grep in order to efficiently answer the questions.
Learning Objectives In today’s task, you will:
Learn what log files are and why they’re useful Understand what valuable information log files can contain Understand some common locations these logs file can be found Use some basic Linux commands to start analysing log files for valuable information Help Elf McBlue track down the Bandit Yeti APT!</description>
    </item>
    
    <item>
      <title>Cyber Advent 2022 - Day 3 [OSINT] [Nothing escapes detective McRed]</title>
      <link>https://shanks.dev/posts/ctf-writeups/cyber-advent-2022/day-03/readme/</link>
      <pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shanks.dev/posts/ctf-writeups/cyber-advent-2022/day-03/readme/</guid>
      <description>Day 3 of tryhackme&amp;rsquo;s Advent of Cyber for 2022! This challenge involves learning about OSINT techniques.
Learning Objectives What is OSINT, and what techniques can extract useful information against a website or target? Using dorks to find specific information on the Google search engine Extracting hidden directories through the Robots.txt file Domain owner information through WHOIS lookup Searching data from hacked databases Acquiring sensitive information from publicly available GitHub repositories What is the name of the Registrar for the domain santagift.</description>
    </item>
    
  </channel>
</rss>
