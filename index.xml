<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shanks&#39; Blog</title>
    <link>https://shanks.dev/</link>
    <description>Recent content on Shanks&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 01 Aug 2023 15:07:11 -0400</lastBuildDate><atom:link href="https://shanks.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>0x8 - Joplin Server using Docker</title>
      <link>https://shanks.dev/posts/blog-posts/0x8/</link>
      <pubDate>Tue, 01 Aug 2023 15:07:11 -0400</pubDate>
      
      <guid>https://shanks.dev/posts/blog-posts/0x8/</guid>
      <description>I&amp;rsquo;ve recently migrated from Anytype to Joplin for my note taking and wanted to self host the cloud server. Because I currently host my website through GitHub Pages but wanted to use a subdomain to get it
Thanks to the docker compose sample file as well as this and this video from DB Tech, I was able to setup my Joplin Server on Portainer
Here is the official Joplin server guide</description>
    </item>
    
    <item>
      <title>0x9 - Jellyfin Server using Docker</title>
      <link>https://shanks.dev/posts/blog-posts/0x9/</link>
      <pubDate>Tue, 25 Jul 2023 15:07:15 -0400</pubDate>
      
      <guid>https://shanks.dev/posts/blog-posts/0x9/</guid>
      <description>I decided I wanted to host my own media server and I didn&amp;rsquo;t want to use Plex so I chose Jellyfin. Here&amp;rsquo;s how I set mine up using docker and Portainer.
Docker You can use docker compose or simply deploy the app through Portainer&amp;rsquo;s UI without docker compose. Replace any $ variable with your setting. Here are the settings that I used for my docker setup:
image: linuxserver/jellyfin:latest ports: - 1900:1900 # tcp - 8086:8086 # tcp - 7359:7359 # udp volumes: - .</description>
    </item>
    
    <item>
      <title>0x6 - Graduation from University</title>
      <link>https://shanks.dev/posts/blog-posts/0x6/</link>
      <pubDate>Fri, 23 Jun 2023 16:27:39 -0400</pubDate>
      
      <guid>https://shanks.dev/posts/blog-posts/0x6/</guid>
      <description>A few days ago I had my convocation. I finally completed my biggest academic struggle &amp;amp; achievement yet, graduating university with a Bachelor&amp;rsquo;s Degree in Computer Science. Having taken courses in nearly every semester during my time at university with the exception of my first summer semester, I am very proud to have achieved such a feat.
Regardless of how I felt about the education itself, the friends and networks that I created was certainly the most valuable part of the journey.</description>
    </item>
    
    <item>
      <title>North Sec 2023 - Look Within Myself</title>
      <link>https://shanks.dev/posts/ctf-writeups/nsec2023/look-within-myself/readme/</link>
      <pubDate>Thu, 25 May 2023 21:10:04 -0400</pubDate>
      
      <guid>https://shanks.dev/posts/ctf-writeups/nsec2023/look-within-myself/readme/</guid>
      <description>From the discourse page we are given the following information:
Based on the information given, we have to tinker with the image posted:
Let&amp;rsquo;s first check if there are embedded files within the image using the following command:
$ binwalk myself-avatar.jpg Okay so there&amp;rsquo;s a zip file hidden, let&amp;rsquo;s extract it using the following command:
$ binwalk --dd=&amp;#39;.*&amp;#39; myself-avatar.jpg We now have the following zip file, it is password protected. From here we could attempt to brute force it with a tool but I was lucky and guessed the correct password to be password.</description>
    </item>
    
    <item>
      <title>0x5 - First North Sec Experience</title>
      <link>https://shanks.dev/posts/blog-posts/0x5/</link>
      <pubDate>Tue, 23 May 2023 16:27:34 -0400</pubDate>
      
      <guid>https://shanks.dev/posts/blog-posts/0x5/</guid>
      <description>This year was my first ever attendance to the North Sec cyber security event. It is Canada&amp;rsquo;s largest cyber security event, consisting of 3 parts: the conference, competition (CTF) and trainings, spanning nearly a week. Depending on which package you buy, you will be given various &amp;lsquo;swag&amp;rsquo; and other items for the various events. In my case, I bought the early bird conference and competition combo since I was still a student at the time (students got a 50% off promotion code) and wanted to do some networking.</description>
    </item>
    
    <item>
      <title>0x4 - MagpieCTF 2023 Writeup Standings</title>
      <link>https://shanks.dev/posts/blog-posts/0x4/</link>
      <pubDate>Wed, 12 Apr 2023 14:56:40 -0400</pubDate>
      
      <guid>https://shanks.dev/posts/blog-posts/0x4/</guid>
      <description>It&amp;rsquo;s been a few weeks but I received some great news on March 28th 2023. I was one of the three winners for the MagpieCTF 2023 writeups portion.
They announced the winners in their Discord server on the announcements channel.
This was a big win for me since it was my first time attempting the writeups officially. I hope to bring more writeups in the future and furhter improve my skills to transfer the knowledge that I&amp;rsquo;ve gained through my experiences with this challenges.</description>
    </item>
    
    <item>
      <title>MagpieCTF 2023 - This outta be large enough right?</title>
      <link>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/binary/this-outta-be-large-enough-right/readme/</link>
      <pubDate>Tue, 28 Feb 2023 14:26:57 -0500</pubDate>
      
      <guid>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/binary/this-outta-be-large-enough-right/readme/</guid>
      <description>We’re given a C source code file to analyze and its executable to test with.
Solution I would like to preface this, that I have done this exact challenge from PicoCTF 2022, called buffer overflow 1 and at the time I followed along with John Hammond’s solution video. As a result, when I saw this challenge, I immediately recognized it and thus I used the solution developed by John Hammond, and simply modified it for this challenges specifics.</description>
    </item>
    
    <item>
      <title>MagpieCTF 2023 - No Password Here</title>
      <link>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/binary/no-password-here/readme/</link>
      <pubDate>Tue, 28 Feb 2023 13:01:33 -0500</pubDate>
      
      <guid>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/binary/no-password-here/readme/</guid>
      <description>This challenge had us look at a C source code file and try to find a way to cause a buffer overflow. Here is the compiled program and its lib.
Solution Opening the C file, we see that the file does not have the typical gets function that is well known for its vulnerabilities. Instead the function we have to focus on it scanf. If you aren’t aware, scanf does not have bound checking capability so if the input string is longer than the buffer size, then it will overflow.</description>
    </item>
    
    <item>
      <title>MagpieCTF 2023 - What is Password</title>
      <link>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/networks/what-is-password/readme/</link>
      <pubDate>Tue, 28 Feb 2023 12:45:57 -0500</pubDate>
      
      <guid>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/networks/what-is-password/readme/</guid>
      <description>This challenge had us look at a pcap file and look through the web traffic. The file can be found here.
Solution First we open the file in Wireshark.
Since the amount of web traffic is very small we can just analyze it manually. Notice the HTTP GET request for /Password.PNG in frame 4. After nearly 10 ACKs and PSHs, we get our server response code 200, HTTP OK in frame 15.</description>
    </item>
    
    <item>
      <title>MagpieCTF 2023 - Chocolate Chips With Zero G</title>
      <link>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/web/chocolate-chips-with-zero-g/</link>
      <pubDate>Mon, 27 Feb 2023 23:36:33 -0500</pubDate>
      
      <guid>https://shanks.dev/posts/ctf-writeups/magpiectf-2023/web/chocolate-chips-with-zero-g/</guid>
      <description>This challenge had us visit our targets website, and look for an insecure admin portal.
Solution Default websites often have a login/admin.html/php web page for admin users to login and modify certain elements. Using this information we can quickly test it, it never hurts to try right? As such we find that http://srv1.2023.magpiectf.ca:1234/admin.html exists.
Note, you could have alternatively seen within the robots.txt that it disallows the traversal/crawling of /admin.html or you could have seen the invisible link within the nav bar.</description>
    </item>
    
  </channel>
</rss>
